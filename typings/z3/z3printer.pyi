"""
This type stub file was generated by pyright.
"""

import sys
from .z3consts import *
from .z3core import *
from ctypes import *

if sys.version_info.major < 3:
    ...
else:
    ...
_z3_op_to_str = ...
_z3_infix = ...
_z3_unary = ...
_z3_precedence = ...
_z3_op_to_fpa_normal_str = ...
_z3_op_to_fpa_pretty_str = ...
_z3_fpa_infix = ...
_ASSOC_OPS = ...
if sys.version_info.major < 3:
    def u(x): # -> str:
        ...
    
else:
    def u(x):
        ...
    
_z3_infix_compact = ...
_ellipses = ...
_html_ellipses = ...
_z3_pre_html_op_to_str = ...
_z3_html_infix = ...
_z3_html_unary = ...
_z3_pre_html_precedence = ...
_infix_map = ...
_unary_map = ...
_infix_compact_map = ...
_z3_html_op_to_str = ...
_z3_html_precedence = ...
_html_infix_map = ...
_html_unary_map = ...
class FormatObject:
    def is_compose(self): # -> Literal[False]:
        ...
    
    def is_choice(self): # -> Literal[False]:
        ...
    
    def is_indent(self): # -> Literal[False]:
        ...
    
    def is_string(self): # -> Literal[False]:
        ...
    
    def is_linebreak(self): # -> Literal[False]:
        ...
    
    def is_nil(self): # -> Literal[True]:
        ...
    
    def children(self): # -> list[Any]:
        ...
    
    def as_tuple(self): # -> None:
        ...
    
    def space_upto_nl(self): # -> tuple[Literal[0], Literal[False]]:
        ...
    
    def flat(self): # -> Self:
        ...
    


class NAryFormatObject(FormatObject):
    def __init__(self, fs) -> None:
        ...
    
    def children(self): # -> Callable[[], ...]:
        ...
    


class ComposeFormatObject(NAryFormatObject):
    def is_compose(sef): # -> Literal[True]:
        ...
    
    def as_tuple(self): # -> tuple[Literal['compose'], list[Any]]:
        ...
    
    def space_upto_nl(self): # -> tuple[Any, Literal[True]] | tuple[Any | Literal[0], Literal[False]]:
        ...
    
    def flat(self): # -> ComposeFormatObject:
        ...
    


class ChoiceFormatObject(NAryFormatObject):
    def is_choice(sef): # -> Literal[True]:
        ...
    
    def as_tuple(self): # -> tuple[Literal['choice'], list[Any]]:
        ...
    
    def space_upto_nl(self):
        ...
    
    def flat(self):
        ...
    


class IndentFormatObject(FormatObject):
    def __init__(self, indent, child) -> None:
        ...
    
    def children(self): # -> list[FormatObject]:
        ...
    
    def as_tuple(self): # -> tuple[Literal['indent'], Any, None]:
        ...
    
    def space_upto_nl(self): # -> tuple[Literal[0], Literal[False]]:
        ...
    
    def flat(self): # -> IndentFormatObject:
        ...
    
    def is_indent(self): # -> Literal[True]:
        ...
    


class LineBreakFormatObject(FormatObject):
    def __init__(self) -> None:
        ...
    
    def is_linebreak(self): # -> Literal[True]:
        ...
    
    def as_tuple(self): # -> Literal['<line-break>']:
        ...
    
    def space_upto_nl(self): # -> tuple[Literal[0], Literal[True]]:
        ...
    
    def flat(self): # -> FormatObject | StringFormatObject:
        ...
    


class StringFormatObject(FormatObject):
    def __init__(self, string) -> None:
        ...
    
    def is_string(self): # -> Literal[True]:
        ...
    
    def as_tuple(self): # -> str:
        ...
    
    def space_upto_nl(self): # -> tuple[Any | int, Literal[False]]:
        ...
    


def fits(f, space_left):
    ...

def to_format(arg, size=...): # -> FormatObject | StringFormatObject:
    ...

def compose(*args): # -> ComposeFormatObject:
    ...

def indent(i, arg): # -> IndentFormatObject:
    ...

def group(arg): # -> ChoiceFormatObject:
    ...

def line_break(): # -> LineBreakFormatObject:
    ...

def seq(args, sep=..., space=...): # -> ComposeFormatObject:
    ...

def seq1(header, args, lp=..., rp=...): # -> ChoiceFormatObject:
    ...

def seq2(header, args, i=..., lp=..., rp=...): # -> ComposeFormatObject | ChoiceFormatObject:
    ...

def seq3(args, lp=..., rp=...): # -> ComposeFormatObject | ChoiceFormatObject:
    ...

class StopPPException(Exception):
    def __str__(self) -> str:
        ...
    


class PP:
    def __init__(self) -> None:
        ...
    
    def pp_string(self, f, indent): # -> None:
        ...
    
    def pp_compose(self, f, indent): # -> None:
        ...
    
    def pp_choice(self, f, indent): # -> None:
        ...
    
    def pp_line_break(self, f, indent): # -> None:
        ...
    
    def pp(self, f, indent): # -> None:
        ...
    
    def __call__(self, out, f): # -> None:
        ...
    


class Formatter:
    def __init__(self) -> None:
        ...
    
    def pp_ellipses(self): # -> FormatObject | StringFormatObject:
        ...
    
    def pp_arrow(self): # -> Literal[' ->']:
        ...
    
    def pp_unknown(self): # -> Literal['<unknown>']:
        ...
    
    def pp_name(self, a): # -> FormatObject | StringFormatObject:
        ...
    
    def is_infix(self, a):
        ...
    
    def is_unary(self, a):
        ...
    
    def get_precedence(self, a): # -> int:
        ...
    
    def is_infix_compact(self, a):
        ...
    
    def is_infix_unary(self, a):
        ...
    
    def add_paren(self, a): # -> ComposeFormatObject:
        ...
    
    def pp_sort(self, s): # -> ChoiceFormatObject | FormatObject | StringFormatObject:
        ...
    
    def pp_const(self, a): # -> ChoiceFormatObject | FormatObject | StringFormatObject:
        ...
    
    def pp_int(self, a): # -> FormatObject | StringFormatObject:
        ...
    
    def pp_rational(self, a): # -> FormatObject | StringFormatObject:
        ...
    
    def pp_algebraic(self, a): # -> FormatObject | StringFormatObject:
        ...
    
    def pp_string(self, a): # -> FormatObject | StringFormatObject:
        ...
    
    def pp_bv(self, a): # -> FormatObject | StringFormatObject:
        ...
    
    def pp_fd(self, a): # -> FormatObject | StringFormatObject:
        ...
    
    def pp_fprm_value(self, a): # -> FormatObject | StringFormatObject:
        ...
    
    def pp_fp_value(self, a): # -> ComposeFormatObject | FormatObject | StringFormatObject:
        ...
    
    def pp_fp(self, a, d, xs):
        ...
    
    def pp_prefix(self, a, d, xs): # -> ChoiceFormatObject:
        ...
    
    def is_assoc(self, k): # -> bool:
        ...
    
    def is_left_assoc(self, k): # -> Literal[True]:
        ...
    
    def infix_args_core(self, a, d, xs, r): # -> None:
        ...
    
    def infix_args(self, a, d, xs): # -> list[Any]:
        ...
    
    def pp_infix(self, a, d, xs): # -> ChoiceFormatObject:
        ...
    
    def pp_unary(self, a, d, xs): # -> ComposeFormatObject:
        ...
    
    def pp_power_arg(self, arg, d, xs): # -> ComposeFormatObject | FormatObject | StringFormatObject | ChoiceFormatObject:
        ...
    
    def pp_power(self, a, d, xs): # -> ChoiceFormatObject:
        ...
    
    def pp_neq(self): # -> FormatObject | StringFormatObject:
        ...
    
    def pp_distinct(self, a, d, xs): # -> ChoiceFormatObject:
        ...
    
    def pp_select(self, a, d, xs): # -> ChoiceFormatObject | ComposeFormatObject:
        ...
    
    def pp_unary_param(self, a, d, xs): # -> ChoiceFormatObject:
        ...
    
    def pp_extract(self, a, d, xs): # -> ChoiceFormatObject:
        ...
    
    def pp_loop(self, a, d, xs): # -> ChoiceFormatObject:
        ...
    
    def pp_set(self, id, a): # -> ChoiceFormatObject:
        ...
    
    def pp_char(self, a): # -> FormatObject | StringFormatObject:
        ...
    
    def pp_pattern(self, a, d, xs): # -> FormatObject | StringFormatObject | ChoiceFormatObject:
        ...
    
    def pp_is(self, a, d, xs): # -> ChoiceFormatObject:
        ...
    
    def pp_map(self, a, d, xs): # -> ChoiceFormatObject:
        ...
    
    def pp_fdecl(self, f, a, d, xs): # -> ChoiceFormatObject:
        ...
    
    def pp_K(self, a, d, xs): # -> ChoiceFormatObject:
        ...
    
    def pp_atmost(self, a, d, f, xs): # -> ChoiceFormatObject:
        ...
    
    def pp_atleast(self, a, d, f, xs): # -> ChoiceFormatObject:
        ...
    
    def pp_pbcmp(self, a, d, f, xs): # -> ChoiceFormatObject:
        ...
    
    def pp_app(self, a, d, xs):
        ...
    
    def pp_var(self, a, d, xs): # -> ChoiceFormatObject | FormatObject | StringFormatObject:
        ...
    
    def pp_quantifier(self, a, d, xs): # -> ChoiceFormatObject:
        ...
    
    def pp_expr(self, a, d, xs): # -> FormatObject | StringFormatObject | ChoiceFormatObject:
        ...
    
    def pp_decl(self, f): # -> ChoiceFormatObject | FormatObject | StringFormatObject:
        ...
    
    def pp_seq_core(self, f, a, d, xs): # -> FormatObject | StringFormatObject | ComposeFormatObject | ChoiceFormatObject:
        ...
    
    def pp_seq(self, a, d, xs): # -> FormatObject | StringFormatObject | ComposeFormatObject | ChoiceFormatObject:
        ...
    
    def pp_seq_seq(self, a, d, xs): # -> FormatObject | StringFormatObject | ComposeFormatObject | ChoiceFormatObject:
        ...
    
    def pp_model(self, m): # -> ComposeFormatObject | ChoiceFormatObject:
        ...
    
    def pp_func_entry(self, e): # -> ChoiceFormatObject:
        ...
    
    def pp_func_interp(self, f): # -> ComposeFormatObject | ChoiceFormatObject:
        ...
    
    def pp_list(self, a): # -> ComposeFormatObject | ChoiceFormatObject:
        ...
    
    def main(self, a): # -> FormatObject | StringFormatObject | ChoiceFormatObject | ComposeFormatObject | Any | Literal['']:
        ...
    
    def __call__(self, a): # -> FormatObject | StringFormatObject | ChoiceFormatObject | ComposeFormatObject | Any | Literal['']:
        ...
    


class HTMLFormatter(Formatter):
    def __init__(self) -> None:
        ...
    
    def pp_arrow(self): # -> FormatObject | StringFormatObject:
        ...
    
    def pp_unknown(self): # -> Literal['<b>unknown</b>']:
        ...
    
    def pp_name(self, a): # -> FormatObject | StringFormatObject:
        ...
    
    def is_assoc(self, k): # -> bool:
        ...
    
    def is_left_assoc(self, k): # -> Literal[True]:
        ...
    
    def is_infix(self, a):
        ...
    
    def is_unary(self, a):
        ...
    
    def get_precedence(self, a):
        ...
    
    def pp_neq(self): # -> FormatObject | StringFormatObject:
        ...
    
    def pp_power(self, a, d, xs): # -> ComposeFormatObject:
        ...
    
    def pp_var(self, a, d, xs): # -> FormatObject | StringFormatObject:
        ...
    
    def pp_quantifier(self, a, d, xs): # -> ChoiceFormatObject:
        ...
    


_PP = ...
_Formatter = ...
def set_pp_option(k, v): # -> bool:
    ...

def obj_to_string(a): # -> str:
    ...

_html_out = ...
def set_html_mode(flag=...): # -> None:
    ...

def set_fpa_pretty(flag=...): # -> None:
    ...

def get_fpa_pretty(): # -> bool:
    ...

def in_html_mode(): # -> bool:
    ...

def pp(a): # -> None:
    ...

def print_matrix(m): # -> None:
    ...

def insert_line_breaks(s, width): # -> str:
    """Break s in lines of size width (approx)"""
    ...

